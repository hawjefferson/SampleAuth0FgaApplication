"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * JavaScript and Node.js SDK for Auth0 Fine Grained Authorization (FGA)
 *
 * API version: 0.1
 * Website: https://fga.dev
 * Documentation: https://docs.fga.dev
 * Support: https://discord.gg/8naAwJfWN6
 * License: [MIT](https://github.com/auth0-lab/fga-js-sdk/blob/main/LICENSE)
 *
 * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Configuration = exports.GetDefaultRetryParams = void 0;
const axios_1 = require("axios");
const errors_1 = require("./errors");
const validation_1 = require("./validation");
function GetDefaultRetryParams(maxRetry = 3, minWaitInMs = 100) {
    return {
        maxRetry: maxRetry,
        minWaitInMs: minWaitInMs,
    };
}
exports.GetDefaultRetryParams = GetDefaultRetryParams;
const environmentConfigurationString = `{"default":{"apiAudience":"https://api.us1.fga.dev/","apiTokenIssuer":"fga.us.auth0.com","apiScheme":"https","apiHost":"api.us1.fga.dev"},"us":{"apiAudience":"https://api.us1.fga.dev/","apiTokenIssuer":"fga.us.auth0.com","apiScheme":"https","apiHost":"api.us1.fga.dev"},"playground":{"allowNoAuth":true,"apiAudience":"https://api.playground.fga.dev/","apiTokenIssuer":"sandcastle-dev.us.auth0.com","apiScheme":"https","apiHost":"api.playground.fga.dev"},"staging":{"apiAudience":"https://api.staging.fga.dev/","apiTokenIssuer":"sandcastle-dev.us.auth0.com","apiScheme":"https","apiHost":"api.staging.fga.dev"}}`;
/**
 *
 * @throws {FgaInvalidEnvironmentError}
 * @param environment - Environment from user config
 * @return EnvironmentConfiguration
 */
const getEnvironmentConfiguration = function (environment = 'default') {
    let environmentConfigs;
    try {
        environmentConfigs = JSON.parse(environmentConfigurationString);
    }
    catch (err) {
        throw new errors_1.FgaInvalidEnvironmentError(environment);
    }
    const environmentConfig = environmentConfigs[environment];
    if (environmentConfig) {
        return environmentConfig;
    }
    const allowedEnvs = Object.keys(environmentConfigs);
    throw new errors_1.FgaInvalidEnvironmentError(environment, allowedEnvs);
};
class Configuration {
    constructor(params = {}, axios = axios_1.default) {
        this.axios = axios;
        /**
         * provide scheme (e.g. `https`)
         *
         * @type {string}
         * @memberof Configuration
         */
        this.apiScheme = "https";
        /**
         * Returns the API base path (apiScheme+apiHost)
         */
        this.getBasePath = () => `${this.apiScheme}://${this.apiHost}`;
        (0, validation_1.assertParamExists)('Configuration', 'storeId', params.storeId);
        const environmentConfiguration = getEnvironmentConfiguration(params.environment);
        this.apiScheme = environmentConfiguration.apiScheme || this.apiScheme;
        this.apiHost = environmentConfiguration.apiHost;
        this.storeId = params.storeId;
        this.clientId = params.clientId;
        this.clientSecret = params.clientSecret;
        this.apiTokenIssuer = environmentConfiguration.apiTokenIssuer;
        this.apiAudience = environmentConfiguration.apiAudience;
        const baseOptions = params.baseOptions || {};
        baseOptions.headers = baseOptions.headers || {};
        if (typeof process === 'object' && process.title === 'node' && !baseOptions.headers['User-Agent']) {
            baseOptions.headers['User-Agent'] = "auth0-fga-sdk {sdkId}/{packageVersion}".replace("{sdkId}", "js").replace("{packageVersion}", "0.7.0");
        }
        this.baseOptions = baseOptions;
        this.retryParams = params.retryParams;
        if (!environmentConfiguration.allowNoAuth) {
            (0, validation_1.assertParamExists)('Configuration', 'clientId', this.clientId);
            (0, validation_1.assertParamExists)('Configuration', 'clientSecret', this.clientSecret);
        }
    }
    /**
     * Ensures that the Configuration is valid
     * @return boolean
     */
    isValid() {
        var _a;
        (0, validation_1.assertParamExists)('Configuration', 'apiScheme', this.apiScheme);
        (0, validation_1.assertParamExists)('Configuration', 'apiHost', this.apiHost);
        (0, validation_1.assertParamExists)('Configuration', 'storeId', this.storeId);
        if (!Configuration.isWellFormedUriString(this.getBasePath())) {
            throw new errors_1.FgaValidationError(`Configuration.apiScheme (${this.apiScheme}) and Configuration.apiHost (${this.apiHost}) do not form a valid URI (${this.getBasePath()})`);
        }
        if ((this.clientId || this.clientSecret) && !(this.clientId && this.clientSecret && this.apiTokenIssuer && this.apiAudience)) {
            (0, validation_1.assertParamExists)('Configuration', 'clientId', this.clientId);
            (0, validation_1.assertParamExists)('Configuration', 'clientSecret', this.clientSecret);
            (0, validation_1.assertParamExists)('Configuration', 'apiTokenIssuer', this.apiTokenIssuer);
            (0, validation_1.assertParamExists)('Configuration', 'apiAudience', this.apiAudience);
        }
        if (this.apiTokenIssuer && !Configuration.isWellFormedUriString(`https://${this.apiTokenIssuer}`)) {
            throw new errors_1.FgaValidationError(`Configuration.apiTokenIssuer does not form a valid URI (https://${this.apiTokenIssuer})`);
        }
        if (((_a = this.retryParams) === null || _a === void 0 ? void 0 : _a.maxRetry) && this.retryParams.maxRetry > 5) {
            throw new errors_1.FgaValidationError("Configuration.retryParams.maxRetry exceeds maximum allowed limit of 5");
        }
        return true;
    }
    static isWellFormedUriString(uri) {
        try {
            const uriResult = new URL(uri);
            return ((uriResult.toString() === uri || uriResult.toString() === `${uri}/`) &&
                (uriResult.protocol === "https:" || uriResult.protocol === "http:"));
        }
        catch (err) {
            return false;
        }
    }
    /**
     * Get access token, request a new one if not cached or expired
     * @return string
     */
    getAccessToken() {
        return __awaiter(this, void 0, void 0, function* () {
            this.isValid();
            if (this.accessToken && (!this.accessTokenExpiryDate || this.accessTokenExpiryDate > new Date())) {
                return this.accessToken;
            }
            return this.requestAccessToken();
        });
    }
    /**
     * Request new access token
     * @return string
    */
    requestAccessToken() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.clientId) {
                return '';
            }
            try {
                const response = yield this.axios.post(`https://${this.apiTokenIssuer}/oauth/token`, {
                    client_id: this.clientId,
                    client_secret: this.clientSecret,
                    audience: this.apiAudience,
                    grant_type: 'client_credentials',
                });
                this.accessToken = response.data.access_token;
                this.accessTokenExpiryDate = new Date(Date.now() + response.data.expires_in);
                return this.accessToken;
            }
            catch (err) {
                if (axios_1.default.isAxiosError(err)) {
                    throw new errors_1.FgaApiAuthenticationError(err);
                }
                throw new errors_1.FgaError(err);
            }
        });
    }
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
exports.Configuration = Configuration;
