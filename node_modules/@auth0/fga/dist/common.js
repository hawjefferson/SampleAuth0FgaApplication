"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * JavaScript and Node.js SDK for Auth0 Fine Grained Authorization (FGA)
 *
 * API version: 0.1
 * Website: https://fga.dev
 * Documentation: https://docs.fga.dev
 * Support: https://discord.gg/8naAwJfWN6
 * License: [MIT](https://github.com/auth0-lab/fga-js-sdk/blob/main/LICENSE)
 *
 * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRequestFunction = exports.toPathString = exports.serializeDataIfNeeded = exports.setSearchParams = exports.setBearerAuthToObject = exports.DUMMY_BASE_URL = void 0;
const errors_1 = require("./errors");
/**
 *
 * @export
 */
exports.DUMMY_BASE_URL = 'https://example.com';
/**
 *
 * @export
 */
const setBearerAuthToObject = function (object, configuration) {
    return __awaiter(this, void 0, void 0, function* () {
        const accessToken = yield configuration.getAccessToken();
        if (accessToken) {
            object["Authorization"] = "Bearer " + accessToken;
        }
    });
};
exports.setBearerAuthToObject = setBearerAuthToObject;
/**
 *
 * @export
 */
const setSearchParams = function (url, ...objects) {
    const searchParams = new URLSearchParams(url.search);
    for (const object of objects) {
        for (const key in object) {
            if (Array.isArray(object[key])) {
                searchParams.delete(key);
                for (const item of object[key]) {
                    searchParams.append(key, item);
                }
            }
            else {
                searchParams.set(key, object[key]);
            }
        }
    }
    url.search = searchParams.toString();
};
exports.setSearchParams = setSearchParams;
/**
 *
 * @export
 */
const serializeDataIfNeeded = function (value, requestOptions, configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
};
exports.serializeDataIfNeeded = serializeDataIfNeeded;
/**
 *
 * @export
 */
const toPathString = function (url) {
    return url.pathname + url.search + url.hash;
};
exports.toPathString = toPathString;
function randomTime(loopCount, minWaitInMs) {
    const min = Math.ceil(Math.pow(2, loopCount) * minWaitInMs);
    const max = Math.ceil(Math.pow(2, (loopCount + 1)) * minWaitInMs);
    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive
}
/**
 * creates an axios request function
 */
const createRequestFunction = function (axiosArgs, globalAxios, configuration) {
    var _a, _b;
    configuration.isValid();
    const retryParams = ((_a = axiosArgs.options) === null || _a === void 0 ? void 0 : _a.retryParams) ? (_b = axiosArgs.options) === null || _b === void 0 ? void 0 : _b.retryParams : configuration.retryParams;
    const maxRetry = retryParams ? retryParams.maxRetry : 0;
    const minWaitInMs = retryParams ? retryParams.minWaitInMs : 0;
    return (axios = globalAxios) => __awaiter(this, void 0, void 0, function* () {
        var _c, _d, _e, _f, _g, _h, _j, _k;
        yield (0, exports.setBearerAuthToObject)(axiosArgs.options.headers, configuration);
        for (let i = 0; i < maxRetry + 1; i++) {
            try {
                const axiosRequestArgs = Object.assign(Object.assign({}, axiosArgs.options), { url: configuration.getBasePath() + axiosArgs.url });
                const response = yield axios.request(axiosRequestArgs);
                const data = typeof response.data === 'undefined' ? {} : response.data;
                const result = Object.assign({}, data);
                Object.defineProperty(result, '$response', {
                    enumerable: false,
                    writable: false,
                    value: response
                });
                return result;
            }
            catch (err) {
                if (!axios.isAxiosError(err) || !((_c = err.response) === null || _c === void 0 ? void 0 : _c.status)) {
                    throw new errors_1.FgaError(err);
                }
                if (((_d = err.response) === null || _d === void 0 ? void 0 : _d.status) === 400 || ((_e = err.response) === null || _e === void 0 ? void 0 : _e.status) === 422) {
                    throw new errors_1.FgaApiValidationError(err);
                }
                else if (((_f = err.response) === null || _f === void 0 ? void 0 : _f.status) === 401 || ((_g = err.response) === null || _g === void 0 ? void 0 : _g.status) === 403) {
                    throw new errors_1.FgaApiAuthenticationError(err);
                }
                else if (((_h = err.response) === null || _h === void 0 ? void 0 : _h.status) === 404) {
                    throw new errors_1.FgaApiNotFoundError(err);
                }
                else if (((_j = err.response) === null || _j === void 0 ? void 0 : _j.status) === 429) {
                    if (i >= maxRetry) {
                        // We have reached the max retry limit
                        // Thus, we have no choice but to throw
                        throw new errors_1.FgaApiRateLimitExceededError(err);
                    }
                    yield new Promise(r => setTimeout(r, randomTime(i, minWaitInMs)));
                }
                else if (((_k = err.response) === null || _k === void 0 ? void 0 : _k.status) >= 500) {
                    throw new errors_1.FgaApiInternalError(err);
                }
                else {
                    throw new errors_1.FgaApiError(err);
                }
            }
        }
    });
};
exports.createRequestFunction = createRequestFunction;
