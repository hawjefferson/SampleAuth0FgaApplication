/**
 * JavaScript and Node.js SDK for Auth0 Fine Grained Authorization (FGA)
 *
 * API version: 0.1
 * Website: https://fga.dev
 * Documentation: https://docs.fga.dev
 * Support: https://discord.gg/8naAwJfWN6
 * License: [MIT](https://github.com/auth0-lab/fga-js-sdk/blob/main/LICENSE)
 *
 * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */
import { AxiosInstance } from 'axios';
export interface RetryParams {
    maxRetry: number;
    minWaitInMs: number;
}
export declare function GetDefaultRetryParams(maxRetry?: number, minWaitInMs?: number): {
    maxRetry: number;
    minWaitInMs: number;
};
export interface UserConfigurationParams {
    storeId: string;
    clientId: string;
    clientSecret: string;
    environment?: string;
    baseOptions?: any;
    retryParams?: RetryParams;
}
export interface EnvironmentConfiguration {
    apiScheme: string;
    apiHost: string;
    apiTokenIssuer: string;
    apiAudience: string;
    allowNoAuth?: boolean;
}
interface BaseOptions {
    headers: Record<string, string>;
}
export declare class Configuration {
    private axios;
    private accessToken?;
    private accessTokenExpiryDate?;
    /**
     * provide scheme (e.g. `https`)
     *
     * @type {string}
     * @memberof Configuration
     */
    apiScheme: string;
    /**
     * provide server host (e.g. `api.fga.example`)
     *
     * @type {string}
     * @memberof Configuration
     */
    apiHost: string;
    /**
     * provide storeId
     *
     * @type {string}
     * @memberof Configuration
     */
    storeId: string;
    /**
     * Client ID
     *
     * @type {string}
     * @memberof Configuration
     */
    clientId?: string;
    /**
     * Client Secret
     *
     * @type {string}
     * @memberof Configuration
     */
    clientSecret?: string;
    /**
     * API Token Issuer
     *
     * @type {string}
     * @memberof Configuration
     */
    apiTokenIssuer?: string;
    /**
     * API Audience
     *
     * @type {string}
     * @memberof Configuration
     */
    apiAudience?: string;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: BaseOptions;
    /**
     * retry options in the case of too many requests
     *
     * @type {RetryParams}
     * @memberof Configuration
     */
    retryParams?: RetryParams;
    constructor(params?: UserConfigurationParams, axios?: AxiosInstance);
    /**
     * Ensures that the Configuration is valid
     * @return boolean
     */
    isValid(): boolean;
    /**
     * Returns the API base path (apiScheme+apiHost)
     */
    getBasePath: () => string;
    private static isWellFormedUriString;
    /**
     * Get access token, request a new one if not cached or expired
     * @return string
     */
    getAccessToken(): Promise<string | undefined>;
    /**
     * Request new access token
     * @return string
    */
    private requestAccessToken;
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime: string): boolean;
}
export {};
