"use strict";
/**
 * JavaScript and Node.js SDK for OpenFGA
 *
 * API version: 0.1
 * Website: https://openfga.dev
 * Documentation: https://openfga.dev/docs
 * Support: https://discord.gg/8naAwJfWN6
 * License: [Apache-2.0](https://github.com/openfga/js-sdk/blob/main/LICENSE)
 *
 * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Credentials = exports.CredentialsMethod = void 0;
const axios_1 = require("axios");
const validation_1 = require("./validation");
const errors_1 = require("./errors");
var CredentialsMethod;
(function (CredentialsMethod) {
    CredentialsMethod["None"] = "none";
    CredentialsMethod["ApiToken"] = "api_token";
    CredentialsMethod["ClientCredentials"] = "client_credentials";
})(CredentialsMethod = exports.CredentialsMethod || (exports.CredentialsMethod = {}));
class Credentials {
    constructor(authConfig, axios = axios_1.default) {
        this.authConfig = authConfig;
        this.axios = axios;
        this.initConfig();
        this.isValid();
    }
    static init(configuration) {
        return new Credentials(configuration.credentials);
    }
    /**
     * Sets the default config values
     * @private
     */
    initConfig() {
        var _a;
        switch ((_a = this.authConfig) === null || _a === void 0 ? void 0 : _a.method) {
            case CredentialsMethod.ApiToken:
                if (this.authConfig.config) {
                    if (!this.authConfig.config.headerName) {
                        this.authConfig.config.headerName = "Authorization";
                    }
                    if (!this.authConfig.config.headerValuePrefix) {
                        this.authConfig.config.headerValuePrefix = "Bearer";
                    }
                }
                break;
            case CredentialsMethod.ClientCredentials:
            case CredentialsMethod.None:
            default:
                break;
        }
    }
    /**
     *
     * @throws {FgaValidationError}
     */
    isValid() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const { authConfig } = this;
        switch (authConfig === null || authConfig === void 0 ? void 0 : authConfig.method) {
            case CredentialsMethod.None:
                break;
            case CredentialsMethod.ApiToken:
                (0, validation_1.assertParamExists)("Credentials", "config.token", (_a = authConfig.config) === null || _a === void 0 ? void 0 : _a.token);
                (0, validation_1.assertParamExists)("Credentials", "config.headerName", (_b = authConfig.config) === null || _b === void 0 ? void 0 : _b.headerName);
                (0, validation_1.assertParamExists)("Credentials", "config.headerName", (_c = authConfig.config) === null || _c === void 0 ? void 0 : _c.headerName);
                break;
            case CredentialsMethod.ClientCredentials:
                (0, validation_1.assertParamExists)("Credentials", "config.clientId", (_d = authConfig.config) === null || _d === void 0 ? void 0 : _d.clientId);
                (0, validation_1.assertParamExists)("Credentials", "config.clientSecret", (_e = authConfig.config) === null || _e === void 0 ? void 0 : _e.clientSecret);
                (0, validation_1.assertParamExists)("Credentials", "config.apiTokenIssuer", (_f = authConfig.config) === null || _f === void 0 ? void 0 : _f.apiTokenIssuer);
                (0, validation_1.assertParamExists)("Credentials", "config.apiAudience", (_g = authConfig.config) === null || _g === void 0 ? void 0 : _g.apiAudience);
                if (!(0, validation_1.isWellFormedUriString)(`https://${(_h = authConfig.config) === null || _h === void 0 ? void 0 : _h.apiTokenIssuer}`)) {
                    throw new errors_1.FgaValidationError(`Configuration.apiTokenIssuer does not form a valid URI (https://${(_j = authConfig.config) === null || _j === void 0 ? void 0 : _j.apiTokenIssuer})`);
                }
                break;
        }
    }
    /**
     * Get access token, request a new one if not cached or expired
     * @return string
     */
    getAccessTokenHeader() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const accessTokenValue = yield this.getAccessTokenValue();
            switch ((_a = this.authConfig) === null || _a === void 0 ? void 0 : _a.method) {
                case CredentialsMethod.None:
                    return;
                case CredentialsMethod.ApiToken:
                    return {
                        name: this.authConfig.config.headerName,
                        value: `${this.authConfig.config.headerValuePrefix ? `${this.authConfig.config.headerValuePrefix} ` : ""}${accessTokenValue}`
                    };
                case CredentialsMethod.ClientCredentials:
                    return {
                        name: "Authorization",
                        value: `Bearer ${accessTokenValue}`
                    };
            }
        });
    }
    getAccessTokenValue() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            switch ((_a = this.authConfig) === null || _a === void 0 ? void 0 : _a.method) {
                case CredentialsMethod.None:
                    return;
                case CredentialsMethod.ApiToken:
                    return this.authConfig.config.token;
                case CredentialsMethod.ClientCredentials:
                    if (this.accessToken && (!this.accessTokenExpiryDate || this.accessTokenExpiryDate > new Date())) {
                        return this.accessToken;
                    }
                    return this.refreshAccessToken();
            }
        });
    }
    /**
     * Request new access token
     * @return string
     */
    refreshAccessToken() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const clientCredentials = (_a = this.authConfig) === null || _a === void 0 ? void 0 : _a.config;
            try {
                const response = yield this.axios.post(`https://${clientCredentials.apiTokenIssuer}/oauth/token`, {
                    client_id: clientCredentials.clientId,
                    client_secret: clientCredentials.clientSecret,
                    audience: clientCredentials.apiAudience,
                    grant_type: "client_credentials",
                });
                this.accessToken = response.data.access_token;
                this.accessTokenExpiryDate = new Date(Date.now() + response.data.expires_in);
                return this.accessToken;
            }
            catch (err) {
                if (axios_1.default.isAxiosError(err)) {
                    throw new errors_1.FgaApiAuthenticationError(err);
                }
                throw new errors_1.FgaError(err);
            }
        });
    }
}
exports.Credentials = Credentials;
